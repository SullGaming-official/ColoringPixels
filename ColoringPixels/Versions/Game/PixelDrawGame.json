<html>
<head>
  <title>PixelDrawGame</title>
  <HTA:APPLICATION
    ID="PixelDraw"
    APPLICATIONNAME="PixelDraw"
    BORDER="thin"
    CAPTION="yes"
    SHOWINTASKBAR="yes"
    SINGLEINSTANCE="yes"
    WINDOWSTATE="normal"
  >
  <meta http-equiv="X-UA-Compatible" content="IE=11">
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      font-family: sans-serif;
      background: #f0f0f0;
    }
    #palette, #tools {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 10px;
    }
    .color {
      width: 32px;
      height: 32px;
      display: inline-block;
      margin: 4px;
      cursor: pointer;
      border: 2px solid #ccc;
      box-sizing: border-box;
    }
    .tool {
      margin: 5px;
      padding: 10px 16px;
      font-size: 18px;
      cursor: pointer;
      border-radius: 6px;
    }
    #canvas {
      position: absolute;
      left: 0;
      bottom: 0;
      background: #fff;
      border: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <div id="palette"></div>
  <div id="tools">
    <button class="tool" onclick="tool='brush'">Brush</button>
    <button class="tool" onclick="tool='eraser'">Eraser</button>
    <button class="tool" onclick="tool='fill'">Fill</button>
    <button class="tool" onclick="undo()">Undo</button>
    <button class="tool" onclick="redo()">Redo</button>
  </div>
  <canvas id="canvas"></canvas>
  <script>
    window.onload = function () {
      var canvas = document.getElementById("canvas");
      var ctx = canvas.getContext("2d");
      var size = 16;
      var tileSize;
      tool = 'brush';
      currentColor = "#000000";
      drawing = false;
      grid = [];
      drawHistory = [];
      redoHistory = [];
      for (var y = 0; y < size; y++) {
        grid[y] = [];
        for (var x = 0; x < size; x++) {
          grid[y][x] = "#ffffff";
        }
      }
      function resizeCanvas() {
        canvas.width = 512;
        canvas.height = 512;
        tileSize = canvas.width / size;
        drawGrid();
      }
      function drawGrid() {
        for (var y = 0; y < size; y++) {
          for (var x = 0; x < size; x++) {
            ctx.fillStyle = grid[y][x];
            ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
            ctx.strokeStyle = "#ccc";
            ctx.strokeRect(x * tileSize, y * tileSize, tileSize, tileSize);
          }
        }
      }
      function saveState() {
        drawHistory.push(JSON.parse(JSON.stringify(grid)));
        if (drawHistory.length > 100) drawHistory.shift();
        redoHistory = [];
      }
      window.undo = function () {
        if (drawHistory.length === 0) return;
        redoHistory.push(JSON.parse(JSON.stringify(grid)));
        grid = drawHistory.pop();
        drawGrid();
      };
      window.redo = function () {
        if (redoHistory.length === 0) return;
        drawHistory.push(JSON.parse(JSON.stringify(grid)));
        grid = redoHistory.pop();
        drawGrid();
      };
      function floodFill(x, y, targetColor, replacementColor) {
        if (targetColor === replacementColor || grid[y][x] !== targetColor) return;
        grid[y][x] = replacementColor;
        if (x > 0) floodFill(x - 1, y, targetColor, replacementColor);
        if (x < size - 1) floodFill(x + 1, y, targetColor, replacementColor);
        if (y > 0) floodFill(x, y - 1, targetColor, replacementColor);
        if (y < size - 1) floodFill(x, y + 1, targetColor, replacementColor);
      }
      function handleDraw(e, isStart) {
        var rect = canvas.getBoundingClientRect();
        var x = Math.floor((e.clientX - rect.left) / tileSize);
        var y = Math.floor((e.clientY - rect.top) / tileSize);
        if (x < 0 || y < 0 || x >= size || y >= size) return;
        if (isStart) saveState();
        if (tool === 'fill') {
          if (isStart) floodFill(x, y, grid[y][x], currentColor);
        } else if (tool === 'brush') {
          grid[y][x] = currentColor;
        } else if (tool === 'eraser') {
          grid[y][x] = "#ffffff";
        }
        drawGrid();
      }
      canvas.onmousedown = function (e) {
        drawing = true;
        handleDraw(e, true);
      };
      canvas.onmousemove = function (e) {
        if (drawing) handleDraw(e, false);
      };

      canvas.onmouseup = function () {
        drawing = false;
      };
      canvas.onmouseleave = function () {
        drawing = false;
      };
      var paletteColors = [
        "#ff0000", "#ffa500", "#ffff00", "#00ff00", "#008000",
        "#add8e6", "#0000ff", "#800080", "#ffc0cb", "#c8a165",
        "#a52a2a", "#ffffff", "#d3d3d3", "#808080", "#000000"
      ];
      var palette = document.getElementById("palette");
      for (var i = 0; i < paletteColors.length; i++) {
        var color = paletteColors[i];
        var swatch = document.createElement("div");
        swatch.className = "color";
        swatch.style.background = color;
        swatch.setAttribute("onclick", "currentColor='" + color + "'");
        palette.appendChild(swatch);
      }
      resizeCanvas();
    };
  </script>
</body>
</html>